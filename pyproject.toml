[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "spec"
description = "A statically typed data structure validator with support for advanced features."
version = "0.0.1"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [{ name = "Zomatree", email = "me@zomatree.live" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = ["typing_extensions>=4.6.0; python_version < '3.13'"]

[project.urls]
Documentation = "https://github.com/zomatree/spec#readme"
Issues = "https://github.com/zomatree/spec/issues"
Source = "https://github.com/zomatree/spec"

[tool.hatch.version]
path = "spec/__init__.py"


# ==== Testing configuration.

[tool.hatch.envs.hatch-test]
dependencies = ["coverage[toml]>=7.4", "covdefaults", "pytest"]
installer = "pip"

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib", "--strict-config", "--strict-markers"]

[tool.coverage.report]
fail_under = 90

[tool.coverage.run]
plugins = ["covdefaults"]
omit = ["tests/test_integration.py"]


# ==== Linting configuration.

[tool.ruff]
include = ["spec/*.py", "tests/*.py"]
target-version = "py310"
line-length = 120

[tool.ruff.lint]
select = [
    "F",
    "E",
    "I",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "EM",
    "ISC",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "RSE",
    "RET",
    "SIM",
    "TID",
    "PTH",
    "ERA",
    "PL",
    "TRY",
    "RUF",
]
ignore = [
    "S101",    # Allow use of assert for typing reasons.
    "PLR2004", # Magic value comparison.
    "SIM105",  # Suppressable exception. contextlib.suppress is a stylistic choice with overhead.
    "ANN101",  # Type of Self for self is usually implicit.
    "ANN102",  # Type of type[Self] for cls is usually implicit.
    "ANN204",  # Special method return types are usually implicit or known by type checkers.
    "ANN401",  # Any is necessary sometimes.
    "PT001",   # pytest recommends against empty parentheses on pytest.fixture.
    "UP038",   # isinstance performs better with tuples than unions.
    # == Recommended ignores by ruff when using ruff format.
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "COM812",
    "COM819",
    # "E501",
    "ISC001",
    "ISC002",
    # == Project-specific rules.
    "RUF012", # Assigning mutable default values at class scope is a thing for dataclass-like structures.
    # Some complexity is unavoidable.
    "PLR0912",
    "PLR0913",
    "PLR0915",
]
unfixable = [
    "ERA", # Prevent incorrectly detected comments from being automatically deleted.
]

[tool.ruff.per-file-ignores]
"**/__init__.py" = [
    "F403", # Ruff doesn't understand star imports in a package's __init__.py.
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.isort]
combine-as-imports = true

# ==== Type-checking configuration.

[tool.pyright]
include = ["spec", "tests"]
pythonVersion = "3.10"
typeCheckingMode = "strict"

reportPrivateUsage = false
reportUnnecessaryTypeIgnoreComment = "warning"
