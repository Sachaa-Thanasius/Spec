[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "spec"
description = "A statically typed data structure validator with support for advanced features."
version = "0.0.1"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = ["python", "validation"]
authors = [
    { name = "Sachaa-Thanasius", email = "111999343+Sachaa-Thanasius@users.noreply.github.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = ["typing_extensions>=4.6.0; python_version < '3.13'"]

[project.urls]
Documentation = "https://github.com/Sachaa-Thanasius/Spec#readme"
Issues = "https://github.com/Sachaa-Thanasius/Spec/issues"
Source = "https://github.com/Sachaa-Thanasius/Spec"


# ---- Testing config

[tool.hatch.envs.hatch-test]
dependencies = ["coverage[toml]>=7.4", "covdefaults", "pytest"]
installer = "pip"

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.11", "3.12"]

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib", "--strict-config", "--strict-markers"]

[tool.coverage.report]
fail_under = 90

[tool.coverage.run]
plugins = ["covdefaults"]
omit = ["tests/test_integration.py"]


# ---- Linting config

[tool.ruff]
include = ["spec/*", "tests/*"]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
    "F",
    "E",
    "I",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "EM",
    "ISC",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "RSE",
    "RET",
    "SIM",
    "TID",
    "PTH",
    "ERA",
    "PL",
    "TRY",
    "RUF",
]
ignore = [
    "S101",   # Use of assert here is a known quantity for typing cases. All uses should be safe to optimize out.
    "SIM105", # Suppressable exception. contextlib.suppress is a stylistic choice with overhead.
    "C90",    # McCabe complexity.
    "ANN101", # Type of Self for self is usually implicit and/or known by the type-checker.
    "ANN102", # Type of type[Self] for cls is usually implicit and/or known by the type-checker.
    "ANN204", # Special method return types are usually implicit and/or known by type checker.
    "ANN401", # Any is needed for some parameters.
    "UP038",  # isinstance performs better with tuples than unions.
    "PT001",  # pytest recommends against empty parentheses on pytest.fixture.
    "PYI036", # Bug with annotations for __exit__.
    "PD011",  # Erroneous issue that triggers for any .values attribute access at all.
    # == Recommended ignores from ruff when using ruff format.
    "E111",
    "E114",
    "E117",
    "COM812",
    "COM819",
    # "E501",
    "ISC001",
    "ISC002",
    # -- Project-specific rules.
    # Some complexity is unavoidable.
    "PLR0912",
    "PLR0913",
    "PLR0915",
]
unfixable = [
    "ERA", # Prevent incorrectly detected comments from being automatically deleted.
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.isort]
lines-after-imports = 2
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
"tests/test_integration.py" = ["T201", "T203"] # Allow prints.


# ---- Type-checking config

[tool.pyright]
include = ["spec", "tests"]
pythonVersion = "3.11"
pythonPlatform = "All"
typeCheckingMode = "strict"

reportPrivateUsage = "none"                  # We're the package; of course we're accessing internals.
reportUnnecessaryIsInstance = "none"         # We should account for garbage input from users.
reportUninitializedInstanceVariable = "none" # Nice as an infrequent checkup, but usually noisy.
reportCallInDefaultInitializer = "warning"
# reportImplicitOverride = "warning"
reportImportCycles = "none"                    # Nice as an infrequent checkup, but "if TYPE_CHECKING" causes false positives.
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
